// Java program to sort a Stack using recursion
// Note that here predefined Stack class is used
// for stack operation

import java.util.ListIterator;
import java.util.Stack;

class Test
{
	// Recursive Method to insert an item x in sorted way
	static void sortedInsert(Stack<Integer> s, int x)
	{
	    if(s.isEmpty() || s.peek()<x)
	    {
		    s.push(x);
		    return;
	    }
	    int temp=s.pop();
	    sortedInsert(s,x);
	    s.push(temp);
	}

	// Method to sort stack
	static void deleteMiddleElementStack(Stack<Integer> s, int k)
	{
	    int mid=s.size()/2+1;
		if(k==1)
		{
		    s.pop();
		    return;
		}
		int m=s.pop();
		deleteMiddleElementStack(s,k-1);
		s.push(m);
	}

	// Utility Method to print contents of stack
	static void printStack(Stack<Integer> s)
	{
		ListIterator<Integer> lt = s.listIterator();

		// forwarding
		while (lt.hasNext())
			lt.next();

		// printing from top to bottom
		while (lt.hasPrevious())
			System.out.print(lt.previous() + " ");
	}

	// Driver code
	public static void main(String[] args)
	{
		Stack<Integer> s = new Stack<>();
		s.push(30);
		s.push(-5);
		s.push(18);
		s.push(14);
		s.push(-3);
		s.push(12);
		s.push(11);

		System.out.println(
			"Stack elements before sorting: ");
		printStack(s);
        int k=s.size()/2+1;
		deleteMiddleElementStack(s,k);

		System.out.println(
			" \n\nStack elements after sorting:");
		printStack(s);
	}
}
