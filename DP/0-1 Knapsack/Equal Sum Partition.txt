/*

Partition problem is to determine whether a given set can be partitioned into two subsets such that the sum of elements in both subsets is the same. 

Examples: 

arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets.

*/

import java.io.*;

class GFG {
	public static void main (String[] args) {
		int set[] = {5,5,4};
		int sum=0;
		int n=3;
		for(int k=0;k<n;k++)
		{
		    sum=sum+set[k];
		}
		if(sum%2!=0)
		{
		    System.out.println("equal partition not possible");
		    System.exit(0);
		}
		sum=sum/2;
		
		boolean[][] arr=new boolean[n+1][sum+1];
		for(int i=0;i<n+1;i++)
		{
		    for(int j=0;j<sum+1;j++)
		    {
		        if(i==0)
		        {
		            arr[i][j]=false;
		        }
		        if(j==0)
		            arr[i][j]=true;
		    }
		}
		for(int i=1;i<n+1;i++)
		{
		    for(int j=1;j<sum+1;j++)
		    {
		        if(set[i-1]>j)
		            arr[i][j]=arr[i-1][j];
		        else
		        {
		            arr[i][j]=arr[i-1][j-set[i-1]] || arr[i-1][j];
		        }
		    }
		}
		System.out.println(arr[n][sum]);
	}
}